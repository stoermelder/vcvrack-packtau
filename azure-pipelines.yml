# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- v2

pr:
- v2

jobs:
- job: Build
  strategy:
    matrix:
      mac:
        imageName: 'macos-11'
        isMac: true
      windows:
        imageName: 'windows-2019'
        isWindows: true
      linux:
        imageName: 'ubuntu-20.04'
        isLinux: true

  pool:
    vmImage: $(imageName)

  steps:
  - checkout: self
    fetchDepth: 1
    # submodules: recursive # can't do submodules here b'cuz depth=1 fails with Github

  - bash: |
      uname -a
      git submodule update --init --recursive
      pushd $AGENT_TEMPDIRECTORY
      curl -o Rack-SDK.zip https://vcvrack.com/downloads/Rack-SDK-2.1.0-win.zip
      unzip Rack-SDK.zip
    displayName: Get Windows Rack-SDK
    condition: variables.isWindows

  - bash: |
      uname -a
      git submodule update --init --recursive
      pushd $AGENT_TEMPDIRECTORY
      curl -o Rack-SDK.zip https://vcvrack.com/downloads/Rack-SDK-2.1.0-mac.zip
      unzip Rack-SDK.zip
    displayName: Get Mac Rack-SDK
    condition: variables.isMac

  - bash: |
      uname -a
      git submodule update --init --recursive
      pushd $AGENT_TEMPDIRECTORY
      curl -o Rack-SDK.zip https://vcvrack.com/downloads/Rack-SDK-2.1.0-lin.zip
      unzip Rack-SDK.zip
    displayName: Get Linux Rack-SDK
    condition: variables.isLinux

  - bash: |
      chmod +x scripts/resetversion.sh
      ./scripts/resetversion.sh
    displayName: Update Version in plugins.json

  - bash: |
      export RACK_DIR=$AGENT_TEMPDIRECTORY/Rack-SDK
      export CC=gcc
      make win-dist
      mkdir products_win/
      cp dist/*vcvplugin products_win/
    displayName: Build Windows Plugins
    condition: variables.isWindows

  - bash: |
      export RACK_DIR=$AGENT_TEMPDIRECTORY/Rack-SDK
      make dist
      mkdir products_mac/
      cp dist/*vcvplugin products_mac/
    displayName: Build Mac Plugins
    condition: variables.isMac

  - bash: |
      export RACK_DIR=$AGENT_TEMPDIRECTORY/Rack-SDK
      sudo apt-get update
      sudo apt-get install libglu-dev --fix-missing
      make dist
      mkdir products_lin/
      cp dist/*vcvplugin products_lin/
    displayName: Build Linux Plugins
    condition: variables.isLinux

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'PACKTAU_ZIP_LINUX'
      targetPath: 'products_lin/'
    displayName: Publish Linux vcvplugin
    condition: variables.isLinux

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'PACKTAU_ZIP_MACOS'
      targetPath: 'products_mac/'
    displayName: Publish macOS vcvplugin
    condition: variables.isMac

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'PACKTAU_ZIP_WIN'
      targetPath: 'products_win/'
    displayName: Publish Windows vcvplugin
    condition: variables.isWindows

- job: UpdateGithubRelease
  dependsOn: Build
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/v2'), eq(variables['Build.SourceBranch'], 'refs/heads/azure-test')))

  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'PACKTAU_ZIP_LINUX'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'PACKTAU_ZIP_MACOS'
      targetPath: $(Build.ArtifactStagingDirectory)

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'PACKTAU_ZIP_WIN'
      targetPath: $(Build.ArtifactStagingDirectory)

  - bash: |
     ls -l $(Build.ArtifactStagingDirectory)
     export EXTEND_TAG=`date "+%Y%m%d"`
     for file in $(Build.ArtifactStagingDirectory)/*.vcvplugin; do mv "$file" "${file/.vcvplugin/-${EXTEND_TAG}.vcvplugin}"; done
     ls -l $(Build.ArtifactStagingDirectory)
    displayName: Tag asset names with Date

  - bash: |
     chmod +x scripts/release-notes.sh
     scripts/release-notes.sh > $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
    displayName: Fake up release notes

  - task: GitHubRelease@0
    displayName: "Update Github Release"
    inputs:
      gitHubConnection: stoermelder
      repositoryName: stoermelder/vcvrack-packtau
      action: edit
      tag: Nightly
      target: '$(Build.SourceVersion)'
      addChangeLog: false
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/ReleaseNotes.md
      isPreRelease: true
      assets: $(Build.ArtifactStagingDirectory)/*.vcvplugin
